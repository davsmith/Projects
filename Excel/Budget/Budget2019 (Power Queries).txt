// Order of queries for Budget (Current Version) as of March 25, 2023
//
// Get Transactions CSV
// Get Projected table
// Get Categories table
// Get Payees table
// Combine Transactions
// Add Subcategories
// Merge fields from Categories
// Merge fields from Payees
// Set Format Type
// Get Tax Parents
// Merge Tax Parents
// List Unknown Categories
//

////////////////////////////////////////////////////////////////////////
// Get Transactions CSV
////////////////////////////////////////////////////////////////////////
//
// Import the Transactions.csv file from Mint and transform into a Transactions table with
// Date:    The date of the Transaction
// Description: Typically the Payee for the Transaction
// Original Description:    The raw text description from the transaction, sometimes transformed into a friendly Name
// Amount: The amount of the transaction
// Transaction Type: Debit or Credit
// Category: The Mint category which is later grouped into Parent categories
// Account Name:  The Mint nick name for the account in which this transaction occurred
// Label:  Mint tags separated by commas
// Notes:  Notes from Mint which later get split on the | delimiter into a set of "Subcategory" fields
//
// The input file name for this query is stored in a named cell in the worksheet
//
let
    #"Retrieve file path parameter" = Excel.CurrentWorkbook(){[Name="tblDataPath"]}[Content],
    #"CSV file path" = #"Retrieve file path parameter"{0}[Source],
    #"Source content" = Csv.Document(File.Contents(#"CSV file path"),[Delimiter=",", Columns=9, Encoding=1252, QuoteStyle=QuoteStyle.Csv]),
    #"Promoted headers" = Table.PromoteHeaders(#"Source content", [PromoteAllScalars=true]),
    #"Set column types" = Table.TransformColumnTypes(#"Promoted headers",{{"Date", type date}, {"Description", type text}, {"Original Description", type text}, {"Amount", Currency.Type}, {"Transaction Type", type text}, {"Category", type text}, {"Account Name", type text}, {"Labels", type text}, {"Notes", type text}}),

    // Mint stores all amounts as positive.  Set the amount to positive or negative based on if it's a credit or debit
    #"Set amount from type" = Table.AddColumn(#"Set column types", "True Amount", each if ([Transaction Type]="debit") then (-1*[Amount]) else ([Amount])),
    #"Remove unused columns" = Table.RemoveColumns(#"Set amount from type",{"Amount", "Transaction Type"}),
    #"Rename columns" = Table.RenameColumns(#"Remove unused columns",{{"Notes", "Memo"}, {"True Amount", "Amount"}}),
    #"Remove Blank Rows" = Table.SelectRows(#"Rename columns", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {"", null})))
in
    #"Remove Blank Rows"
    

////////////////////////////////////////////////////////////////////////
// Get Projected table
////////////////////////////////////////////////////////////////////////
//
// Retrieves the named column for Projected expenses from the worksheet
//
let
    Source = Excel.CurrentWorkbook(){[Name="tblProjected"]}[Content],
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Account Name", type text}, {"Date", type date}, {"Description", type text}, {"Category", type text}, {"Labels", type text}, {"Memo", type text}, {"Amount", Currency.Type}}),
    #"Removed Blank Rows" = Table.SelectRows(#"Changed Type", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {"", null})))
in
    #"Removed Blank Rows"


////////////////////////////////////////////////////////////////////////
// Get Categories table
////////////////////////////////////////////////////////////////////////
//
let
    Source = Excel.CurrentWorkbook(){[Name="tblCategories"]}[Content],
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Category", type text}, {"Parent", type text}, {"Type", type text}})
in
    #"Changed Type"


////////////////////////////////////////////////////////////////////////
// Get Payees table
////////////////////////////////////////////////////////////////////////
let
    Source = Excel.CurrentWorkbook(){[Name="Payees"]}[Content],
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Mint", type text}, {"Friendly Name", type text}})
in
    #"Changed Type"


////////////////////////////////////////////////////////////////////////
// Combine Transactions
////////////////////////////////////////////////////////////////////////
//
// Appends the transactions retrieved from the Mint CSV with a set of projected expenses retrieved from the worksheet
//
let
    Source = Table.Combine({#"Get Transactions CSV", #"Get Projected table"})
in
    Source


////////////////////////////////////////////////////////////////////////
// Add Subcategories
////////////////////////////////////////////////////////////////////////
//
// Retrieve the subcategories which were manually entered into the "Notes" field in Mint.
//
// The notation is to flag subgategories between # symbols and delimit between sub-categories with |
// The subcategories are ultimately split into subcategory.1 - subcategory.4
//
let
    Source = #"Combine Transactions",
    #"Extract subcategory from memo" = Table.AddColumn(#"Source", "Subcategory", each Text.Lower(Text.BetweenDelimiters([Memo],"#","#"))),
    #"Set column order" = Table.ReorderColumns(#"Extract subcategory from memo",{"Account Name", "Date", "Amount", "Description", "Original Description", "Category", "Subcategory", "Labels", "Memo"}),
    #"Split subcategory on delimeter" = Table.SplitColumn(#"Set column order", "Subcategory", Splitter.SplitTextByDelimiter("|", QuoteStyle.Csv), {"Subcategory.1", "Subcategory.2", "Subcategory.3", "Subcategory.4","Subcategory.5"}),
    #"Set column types" = Table.TransformColumnTypes(#"Split subcategory on delimeter",{{"Amount", Currency.Type}, {"Subcategory.1", type text}, {"Subcategory.2", type text}, {"Subcategory.3", type text}, {"Subcategory.4", type text},{"Subcategory.5", type text}}),
    #"Capitalized Each Word" = Table.TransformColumns(#"Set column types",{{"Subcategory.1", Text.Proper, type text}})
in
    #"Capitalized Each Word"


////////////////////////////////////////////////////////////////////////
// Merge fields from Categories
////////////////////////////////////////////////////////////////////////
let
    Source = Table.NestedJoin(#"Add Subcategories", {"Category"}, #"Get Categories table", {"Category"}, "Categories", JoinKind.LeftOuter),

// Added Category.1 to allow filtering and pivoting on categories at the same time
    #"Expand categories" = Table.ExpandTableColumn(Source, "Categories", {"Category", "Parent", "Type", "Discretionary", "Frequency"}, {"Category.1", "Parent", "Type", "Discretionary", "Frequency"}),
//    #"Reorder columns" = Table.ReorderColumns(#"Expand categories",{"Account Name", "Date", "Amount", "Description", "Original Description", "Category", "Subcategory.1", "Subcategory.2", "Subcategory.3", "Subcategory.4", "Labels", "Memo", "Parent", "Category.1", "Type", "Discretionary", "Frequency"}),
    #"Sort transactions by date" = Table.Sort(#"Expand categories",{{"Date", Order.Descending}}),
    #"Duplicate parent column" = Table.DuplicateColumn(#"Sort transactions by date", "Parent", "Parent.1"),
    #"Reorder columns" = Table.ReorderColumns(#"Duplicate parent column",{"Account Name", "Date", "Amount", "Description", "Original Description", "Category", "Subcategory.1", "Subcategory.2", "Subcategory.3", "Subcategory.4", "Subcategory.5", "Labels", "Memo", "Parent", "Parent.1", "Category.1", "Type", "Discretionary", "Frequency"})
in
    #"Reorder columns"
    
  
////////////////////////////////////////////////////////////////////////
// Merge fields from Payees
////////////////////////////////////////////////////////////////////////
let
    Source = Table.NestedJoin(#"Merge fields from Categories", {"Description"}, #"Get Payees table", {"Mint"}, "Get Payees table", JoinKind.LeftOuter),
    #"Expand Get Payees table" = Table.ExpandTableColumn(Source, "Get Payees table", {"Friendly Name"}, {"Friendly Name"}),
    #"Set column order" = Table.ReorderColumns(#"Expand Get Payees table",{"Account Name", "Date", "Amount", "Friendly Name", "Description", "Original Description", "Parent", "Category", "Category.1", "Subcategory.1", "Subcategory.2", "Subcategory.3", "Subcategory.4","Subcategory.5", "Labels", "Memo", "Type", "Discretionary", "Frequency"}),
    #"Replace value" = Table.ReplaceValue(#"Set column order",null,each [Description],Replacer.ReplaceValue,{"Friendly Name"}),
    #"Set friendly name"= Table.ReplaceValue(#"Replace value", each [Friendly Name], each if [Subcategory.5] <> null then [Subcategory.5] else [Description], Replacer.ReplaceText, {"Friendly Name"}),
    #"Capitalized Each Word" = Table.TransformColumns(#"Set friendly name",{{"Friendly Name", Text.Proper, type text}})
in
    #"Capitalized Each Word"


////////////////////////////////////////////////////////////////////////
// Set Format Type
////////////////////////////////////////////////////////////////////////
let
    Source = #"Merge fields from Payees",
    #"Added Conditional Column" = Table.AddColumn(Source, "Custom", each if Text.StartsWith([Description], "+") then "pending" else if Text.StartsWith([Friendly Name], "*") then "autofilled" else if [Subcategory.3] = "projected" then "projected" else if Text.StartsWith([Description], "_") then "reconciled" else "unreconciled"),
    #"Renamed Columns" = Table.RenameColumns(#"Added Conditional Column",{{"Custom", "Format Type"}})
in
    #"Renamed Columns"


////////////////////////////////////////////////////////////////////////
// Get Tax Parents
////////////////////////////////////////////////////////////////////////
let
    Source = Excel.CurrentWorkbook(){[Name="tblTaxParents"]}[Content],
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Category", type text}, {"Tax Parent", type text}})
in
    #"Changed Type"


////////////////////////////////////////////////////////////////////////
// Merge Tax Parents
////////////////////////////////////////////////////////////////////////
let
    Source = Table.NestedJoin(#"Set Format Type", {"Category"}, #"Get Tax Parents", {"Category"}, "Get Tax Parents", JoinKind.LeftOuter),
    #"Expanded Get Tax Parents" = Table.ExpandTableColumn(Source, "Get Tax Parents", {"Tax Parent"}, {"Tax Parent"}),
    #"Added Conditional Column" = Table.AddColumn(#"Expanded Get Tax Parents", "Tax Related", each if [Category] = "Charity" or ([Labels] <> null and Text.Contains([Labels], "Tax Related")) then "yes" else "no"),
    #"Filtered Rows" = Table.SelectRows(#"Added Conditional Column", each true)
in
    #"Filtered Rows"


////////////////////////////////////////////////////////////////////////
// List Unknown Categories
////////////////////////////////////////////////////////////////////////
let
    Source = #"Combine Transactions",
    #"Merged Queries" = Table.NestedJoin(Source, {"Category"}, #"Get Categories table", {"Category"}, "Get Categories table", JoinKind.LeftAnti),
    #"Removed Other Columns" = Table.SelectColumns(#"Merged Queries",{"Category"}),
    #"Removed Duplicates" = Table.Distinct(#"Removed Other Columns")
in
    #"Removed Duplicates"